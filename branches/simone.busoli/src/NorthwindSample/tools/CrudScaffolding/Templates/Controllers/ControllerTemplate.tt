<#@ import namespace="System.Collections" #>

<#+
public class ControllerTemplate : BaseTemplate
{
	public ControllerTemplate(string solutionName, string domainObjectName, NameValueCollection properties, string[] namespaceHierarchy) 
		: base(solutionName, domainObjectName, properties, namespaceHierarchy) { }

	protected override void RenderCore()
	{
#>
using System.Web.Mvc;
using <#= AppendNamespaceHierarchyTo(SolutionName + ".Core") #>;
using SharpArch.Core.PersistenceSupport;
using SharpArch.Core;
using System.Collections.Generic;
using System;
using SharpArch.Web.NHibernate;
using NHibernate.Validator.Engine;
using System.Text;
using SharpArch.Web.NHibernate.Validator;

namespace <#= AppendNamespaceHierarchyTo(SolutionName + ".Controllers") #>
{
    [HandleError]
    public class <#= DomainObjectNamePlural #>Controller : Controller
    {
        public <#= DomainObjectNamePlural #>Controller(IRepository<<#= DomainObjectName #>> <#= DomainObjectNameCamelCase #>Repository) {
            Check.Require(<#= DomainObjectNameCamelCase #>Repository != null, "<#= DomainObjectNameCamelCase #>Repository may not be null");

            this.<#= DomainObjectNameCamelCase #>Repository = <#= DomainObjectNameCamelCase #>Repository;
        }

        public ActionResult Index() {
            List<<#= DomainObjectName #>> <#= DomainObjectNamePluralCamelCase #> = <#= DomainObjectNameCamelCase #>Repository.GetAll();
            return View(<#= DomainObjectNamePluralCamelCase #>);
        }

        public ActionResult Show(int id) {
            <#= DomainObjectName #> <#= DomainObjectNameCamelCase #> = <#= DomainObjectNameCamelCase #>Repository.Get(id);
            return View(<#= DomainObjectNameCamelCase #>);
        }

        public ActionResult Create() {
            return View();
        }

        [Transaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Create(<#= DomainObjectName #> <#= DomainObjectNameCamelCase #>) {
            if (<#= DomainObjectNameCamelCase #>.IsValid()) {
                <#= DomainObjectNameCamelCase #>Repository.SaveOrUpdate(<#= DomainObjectNameCamelCase #>);

                TempData["message"] = "The <#= DomainObjectNameCamelCase #> was successfully created.";
                return RedirectToAction("Index");
            }
            else {
                MvcValidationAdapter.TransferValidationMessagesTo(ViewData.ModelState, <#= DomainObjectNameCamelCase #>.ValidationMessages);
                return View();
            }
        }

        public ActionResult Edit(int id) {
            <#= DomainObjectName #> <#= DomainObjectNameCamelCase #> = <#= DomainObjectNameCamelCase #>Repository.Get(id);
            return View(<#= DomainObjectNameCamelCase #>);
        }

        [Transaction]
        [AcceptVerbs(HttpVerbs.Post)]
        public ActionResult Edit(int id, <#= DomainObjectName #> <#= DomainObjectNameCamelCase #>) {
            <#= DomainObjectName #> <#= DomainObjectNameCamelCase #>ToUpdate = <#= DomainObjectNameCamelCase #>Repository.Get(id);

            if (<#= DomainObjectNameCamelCase #>.IsValid()) {
				<#+
				PushIndent("\t\t\t\t");

				foreach (string	propertyName in Properties.AllKeys ) {
					WriteLine(DomainObjectNameCamelCase + "ToUpdate." + propertyName + " = " + DomainObjectNameCamelCase + "." + propertyName + ";");
				}

				PopIndent();
				#>

                TempData["message"] = "The <#= DomainObjectNameCamelCase #> was successfully updated.";
                return RedirectToAction("Index");
            }
            else {
                MvcValidationAdapter.TransferValidationMessagesTo(ViewData.ModelState, <#= DomainObjectNameCamelCase #>.ValidationMessages);
                return View();
            }
        }

        [Transaction]
        public ActionResult Delete(int id) {
            string resultMessage = "The <#= DomainObjectNameCamelCase #> was successfully deleted.";
            <#= DomainObjectName #> <#= DomainObjectNameCamelCase #>ToDelete = <#= DomainObjectNameCamelCase #>Repository.Get(id);

            if (<#= DomainObjectNameCamelCase #>ToDelete != null) {
                <#= DomainObjectNameCamelCase #>Repository.Delete(<#= DomainObjectNameCamelCase #>ToDelete);

                try {
                    <#= DomainObjectNameCamelCase #>Repository.DbContext.CommitChanges();
                }
                catch {
                    resultMessage = "A problem was encountered preventing the <#= DomainObjectNameCamelCase #> from being deleted. " +
						"Another item likely depends on this <#= DomainObjectNameCamelCase #>.";
                    <#= DomainObjectNameCamelCase #>Repository.DbContext.RollbackTransaction();
                }
            }
            else {
                resultMessage = "The <#= DomainObjectNameCamelCase #> could not be found for deletion. It may already have been deleted.";
            }

            TempData["Message"] = resultMessage;
            return RedirectToAction("Index");
        }

        private readonly IRepository<<#= DomainObjectName #>> <#= DomainObjectNameCamelCase #>Repository;
    }
}
<#+
	}
}
#>
